from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button

class CaesarCipherApp(App):
    def build(self):
        self.title = "Szyfr Cezara"
        layout = BoxLayout(orientation='vertical', spacing=10, padding=20)
        

        layout.add_widget(Label(text="Wprowadź wiadomość do zaszyfrowania:", size_hint_y=0.2))
        
        self.message_input = TextInput(multiline=True, size_hint_y=0.4)
        layout.add_widget(self.message_input)
        
        layout.add_widget(Label(text="Podaj przesunięcie (liczba całkowita):", size_hint_y=0.1))
        
        self.shift_input = TextInput(multiline=False, size_hint_y=0.1)
        layout.add_widget(self.shift_input)
        
        encrypt_btn = Button(text="Zaszyfruj!", size_hint_y=0.2)
        encrypt_btn.bind(on_press=self.encrypt_message)
        layout.add_widget(encrypt_btn)
        
        self.result_label = Label(text="Zaszyfrowana wiadomość:", 
                                size_hint_y=0.4,
                                halign='left',
                                valign='top')
        layout.add_widget(self.result_label)
        
        return layout

    def encrypt_message(self, instance):
        message = self.message_input.text
        shift = self.shift_input.text
        
        try:
            shift = int(shift)
            encrypted = self.caesar_cipher(message, shift)
            self.result_label.text = f"Zaszyfrowana wiadomość:\n{encrypted}"
            self.result_label.color = (0, 1, 0, 1)  # zielony
        except ValueError:
            self.result_label.text = "Błąd: Nieprawidłowe przesunięcie!\nWprowadź liczbę całkowitą."
            self.result_label.color = (1, 0, 0, 1)  # czerwony

    def caesar_cipher(self, text, shift):
        result = ""
        shift = shift % 26  # Normalizacja przesunięcia
        
        for char in text:
            if char.isupper():
                result += chr((ord(char) + shift - 65) % 26 + 65)
            elif char.islower():
                result += chr((ord(char) + shift - 97) % 26 + 97)
            else:
                result += char
        return result

if __name__ == '__main__':
    CaesarCipherApp().run()
